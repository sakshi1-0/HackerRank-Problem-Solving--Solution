import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'formingMagicSquare' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY s as parameter.
     */

    public static int formingMagicSquare(List<List<Integer>> s) {
    // Write your code here
  int sum = 0;
        boolean isFirst = true;
        //find all 
        List<int[][]> list = genera();
        //find min
        for (int[][] ints : list) {
            int total = 0;
            for (int i = 0; i < 3; i++) {
                for (int i1 = 0; i1 < 3; i1++) {
                    total += Math.abs(ints[i][i1] - s.get(i).get(i1));
                }
            }
            if (isFirst){
                sum = total;
                isFirst = false;
            } else {
                sum = Math.min(sum, total);
            }
        }
        return sum;
    }
     public static List<int[][]> genera() {
        Stack<int[][]> numList = new Stack<>();
        int[][] square = {{6, 1, 8}, {7, 5, 3}, {2, 9, 4}};
        //rotate
        int du = 270;
        while (du >= 0) {
            int[][] square1 = new int[3][3];
            if (!numList.isEmpty()) {
                square = numList.peek();
            }
            for (int i = 0; i < 3; i++) {
                for (int i1 = 0; i1 < 3; i1++) {
                     square1[i][i1] = square[2 - i1][i];
                }
            }
            numList.push(square1);
            du -= 90;
        }
        List<int[][]> list = new ArrayList(7);
        //find left => right
        numList.forEach(a ->{
            int[][] square1 = new int[3][3];
            for (int i = 0; i < 3; i++) {
                for (int i1 = 0; i1 < 3 ; i1++) {
                    square1[i][i1] = a[i][2 - i1];
                }
            }
            list.add(square1);
        });
        numList.addAll(list);
        return numList;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        List<List<Integer>> s = new ArrayList<>();

        IntStream.range(0, 3).forEach(i -> {
            try {
                s.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int result = Result.formingMagicSquare(s);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
