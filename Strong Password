import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'minimumNumber' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING password
     */

    public static int minimumNumber(int n, String password) {
    // Return the minimum number of characters to make the password strong
    
     boolean hasDigits = false; 
     boolean haslower_case = false; 
     boolean hasupper_case = false;
      boolean hasSpecial_character = false; 
      String special_charactes = "!@#$%^&*()-+";

  for (char ch : password.toCharArray()) {
      if(Character.isDigit(ch)){
          hasDigits = true;
      }else if(Character.isLowerCase(ch)){
          haslower_case = true;
      }else if(Character.isUpperCase(ch)){
          hasupper_case = true;
      }else if(special_charactes.indexOf(ch) >= 0){
          hasSpecial_character = true;
      }
  }

  int missingTypes = 0;

  if(!hasDigits)missingTypes++;
  if(!haslower_case)missingTypes++;
  if(!hasupper_case)missingTypes++;
  if(!hasSpecial_character)missingTypes++;

  int additionalChars = Math.max(0, 6-n);

  return Math.max(missingTypes, additionalChars);
          

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String password = bufferedReader.readLine();

        int answer = Result.minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
