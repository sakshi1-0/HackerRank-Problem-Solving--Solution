import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'missingNumbers' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY arr
     *  2. INTEGER_ARRAY brr
     */

    public static List<Integer> missingNumbers(List<Integer> arr, List<Integer> brr) {
    // Write your code here
     List<Integer> brr1=new ArrayList<>(brr);
   List<Integer> list=new ArrayList<>();

                 brr1.removeAll(arr);
                 list.addAll(brr1);
                 brr.removeAll(brr1);

 Map<Integer,Long> m1 =   arr.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
 Map<Integer,Long> m2 =   brr.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));


     for (Integer key : m1.keySet()) {
        if (m2.containsKey(key)) {
            Long value1 = m1.get(key);
            Long value2 = m2.get(key);

            if (!value1.equals(value2)) {
                list.add(key);
            }
        }
    }

          Collections.sort(list);  
   return list;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int m = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> brr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.missingNumbers(arr, brr);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
