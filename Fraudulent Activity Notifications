import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'activityNotifications' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY expenditure
     *  2. INTEGER d
     */

    public static int activityNotifications(List<Integer> expenditure, int d) {
    // Write your code here
   
     PriorityQueue<Integer> max = new PriorityQueue<>();
        PriorityQueue<Integer> min = new PriorityQueue<>(Collections.reverseOrder());
        
       for(int i =0; i<d; i++){
           max.add(expenditure.get(i));
       }
        
        if(d%2!=0){
            for (int i = 0; i <= (d-1)/2; i++) {
                min.add(max.poll());
            }
        }else{
            for(int i =0; i<d/2;i++){
                min.add(max.poll());
            }
        }
        
        int t = 0;
        int counter = 0;
        
        if(d%2!=0){
            int k =0;
            
            for(int i = d;i< expenditure.size();i++){
                
                int media = min.peek();
                
                if(expenditure.get(i)>=2*media){
                    counter++;
                }

                
                 if(expenditure.get(k)<=min.peek()){
                    min.remove(expenditure.get(k));
                    
                    if(expenditure.get(i)<max.peek()){
                        min.add(expenditure.get(i));
                    }else{
                        max.add(expenditure.get(i));
                        min.add(max.poll());
                    }
                    
                }else{
                    max.remove(expenditure.get(k));
                    
                    if(expenditure.get(i)<max.peek()){
                        min.add(expenditure.get(i));
                        max.add(min.poll());
                        
                    }else{
                        max.add(expenditure.get(i));
                    }
                    
                }   
                k++;
            }

             
        }else{
            int k =0;
            for(int i = d; i<expenditure.size();i++){
                float a = (float) min.peek();
                float b = (float) max.peek();
                float media = (a+b)/2;
                
                if(expenditure.get(i)>=2*media){
                    counter++;
                }
                
                if(expenditure.get(k)<=min.peek()){
                    min.remove(expenditure.get(k));
                    if(expenditure.get(i)<max.peek()){
                        min.add(expenditure.get(i));
                    }else{
                        max.add(expenditure.get(i));
                        min.add(max.poll());
                    }
                }else{
                    max.remove(expenditure.get(k));
                    if(expenditure.get(i)<max.peek()){
                        min.add(expenditure.get(i));
                        max.add(min.poll());
                        
                    }else{
                        max.add(expenditure.get(i));
                    }
                }
                
                
                k++;
            }
        }
        
        return counter;
            
        
        
    
 
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int d = Integer.parseInt(firstMultipleInput[1]);

        List<Integer> expenditure = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.activityNotifications(expenditure, d);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
