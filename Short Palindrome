import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'shortPalindrome' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */

    public static int shortPalindrome(String s) {
    // Write your code here
    
    int[] seenCount = new int[26];
        int[] count = new int[26];
        int[] xyCount = new int[26 * 26];
        int totalCount = 0;
        int m = 1000000007;
        for (char k : s.toCharArray()) {
                int X = k - 'a';
                int XY = X;
                totalCount = (totalCount +count[X]) % m;


                for (int Y = 0; Y < 26; Y++) {
                        count[Y] = (count[Y]  + xyCount[XY])  % m;
                        xyCount[XY] = (xyCount[XY] + seenCount[Y])  % m;
                        XY += 26;
                }
                seenCount[X]++;
        }
        return totalCount;

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        int result = Result.shortPalindrome(s);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
