import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'countSort' function below.
     *
     * The function accepts 2D_STRING_ARRAY arr as parameter.
     */

    public static void countSort(List<List<String>> arr) {
    // Write your code here
      Map<Integer,List<String>> map= new LinkedHashMap<>();

 for(int i=0;i<arr.size()/2;i++){
     arr.get(i).set(1, "-");         
 }


 List<String> s=new LinkedList<>();
 int iValue;
 for(int i=0;i<arr.size();i++){
     iValue=Integer.parseInt(arr.get(i).get(0));
     if(map.containsKey(iValue)){
         map.get(iValue).add(arr.get(i).get(1));

     }else{
         s.add(arr.get(i).get(1));  
        map.put(Integer.parseInt(arr.get(i).get(0)), new LinkedList<>(s)); 
        s.clear();
     }
 }


       List<Integer> sorted=map.keySet().stream().sorted().collect(Collectors.toList());

       for(int i : sorted){ 
           for(int j=0;j<map.get(i).size();j++){
               System.out.print(map.get(i).get(j)+" ");
           }
    }
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<String>> arr = new ArrayList<>();

        IntStream.range(0, n).forEach(i -> {
            try {
                arr.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        Result.countSort(arr);

        bufferedReader.close();
    }
}
